"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/domhandler";
exports.ids = ["vendor-chunks/domhandler"];
exports.modules = {

/***/ "(rsc)/./node_modules/domhandler/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/domhandler/lib/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.DomHandler = void 0;\nvar domelementtype_1 = __webpack_require__(/*! domelementtype */ \"(rsc)/./node_modules/domelementtype/lib/index.js\");\nvar node_js_1 = __webpack_require__(/*! ./node.js */ \"(rsc)/./node_modules/domhandler/lib/node.js\");\n__exportStar(__webpack_require__(/*! ./node.js */ \"(rsc)/./node_modules/domhandler/lib/node.js\"), exports);\n// Default options\nvar defaultOpts = {\n  withStartIndices: false,\n  withEndIndices: false,\n  xmlMode: false\n};\nvar DomHandler = /** @class */function () {\n  /**\n   * @param callback Called once parsing has completed.\n   * @param options Settings for the handler.\n   * @param elementCB Callback whenever a tag is closed.\n   */\n  function DomHandler(callback, options, elementCB) {\n    /** The elements of the DOM */\n    this.dom = [];\n    /** The root element for the DOM */\n    this.root = new node_js_1.Document(this.dom);\n    /** Indicated whether parsing has been completed. */\n    this.done = false;\n    /** Stack of open tags. */\n    this.tagStack = [this.root];\n    /** A data node that is still being written to. */\n    this.lastNode = null;\n    /** Reference to the parser instance. Used for location information. */\n    this.parser = null;\n    // Make it possible to skip arguments, for backwards-compatibility\n    if (typeof options === \"function\") {\n      elementCB = options;\n      options = defaultOpts;\n    }\n    if (typeof callback === \"object\") {\n      options = callback;\n      callback = undefined;\n    }\n    this.callback = callback !== null && callback !== void 0 ? callback : null;\n    this.options = options !== null && options !== void 0 ? options : defaultOpts;\n    this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;\n  }\n  DomHandler.prototype.onparserinit = function (parser) {\n    this.parser = parser;\n  };\n  // Resets the handler back to starting state\n  DomHandler.prototype.onreset = function () {\n    this.dom = [];\n    this.root = new node_js_1.Document(this.dom);\n    this.done = false;\n    this.tagStack = [this.root];\n    this.lastNode = null;\n    this.parser = null;\n  };\n  // Signals the handler that parsing is done\n  DomHandler.prototype.onend = function () {\n    if (this.done) return;\n    this.done = true;\n    this.parser = null;\n    this.handleCallback(null);\n  };\n  DomHandler.prototype.onerror = function (error) {\n    this.handleCallback(error);\n  };\n  DomHandler.prototype.onclosetag = function () {\n    this.lastNode = null;\n    var elem = this.tagStack.pop();\n    if (this.options.withEndIndices) {\n      elem.endIndex = this.parser.endIndex;\n    }\n    if (this.elementCB) this.elementCB(elem);\n  };\n  DomHandler.prototype.onopentag = function (name, attribs) {\n    var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : undefined;\n    var element = new node_js_1.Element(name, attribs, undefined, type);\n    this.addNode(element);\n    this.tagStack.push(element);\n  };\n  DomHandler.prototype.ontext = function (data) {\n    var lastNode = this.lastNode;\n    if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {\n      lastNode.data += data;\n      if (this.options.withEndIndices) {\n        lastNode.endIndex = this.parser.endIndex;\n      }\n    } else {\n      var node = new node_js_1.Text(data);\n      this.addNode(node);\n      this.lastNode = node;\n    }\n  };\n  DomHandler.prototype.oncomment = function (data) {\n    if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {\n      this.lastNode.data += data;\n      return;\n    }\n    var node = new node_js_1.Comment(data);\n    this.addNode(node);\n    this.lastNode = node;\n  };\n  DomHandler.prototype.oncommentend = function () {\n    this.lastNode = null;\n  };\n  DomHandler.prototype.oncdatastart = function () {\n    var text = new node_js_1.Text(\"\");\n    var node = new node_js_1.CDATA([text]);\n    this.addNode(node);\n    text.parent = node;\n    this.lastNode = text;\n  };\n  DomHandler.prototype.oncdataend = function () {\n    this.lastNode = null;\n  };\n  DomHandler.prototype.onprocessinginstruction = function (name, data) {\n    var node = new node_js_1.ProcessingInstruction(name, data);\n    this.addNode(node);\n  };\n  DomHandler.prototype.handleCallback = function (error) {\n    if (typeof this.callback === \"function\") {\n      this.callback(error, this.dom);\n    } else if (error) {\n      throw error;\n    }\n  };\n  DomHandler.prototype.addNode = function (node) {\n    var parent = this.tagStack[this.tagStack.length - 1];\n    var previousSibling = parent.children[parent.children.length - 1];\n    if (this.options.withStartIndices) {\n      node.startIndex = this.parser.startIndex;\n    }\n    if (this.options.withEndIndices) {\n      node.endIndex = this.parser.endIndex;\n    }\n    parent.children.push(node);\n    if (previousSibling) {\n      node.prev = previousSibling;\n      previousSibling.next = node;\n    }\n    node.parent = parent;\n    this.lastNode = null;\n  };\n  return DomHandler;\n}();\nexports.DomHandler = DomHandler;\nexports[\"default\"] = DomHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domhandler/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domhandler/lib/node.js":
/*!*********************************************!*\
  !*** ./node_modules/domhandler/lib/node.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.CDATA = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;\nvar domelementtype_1 = __webpack_require__(/*! domelementtype */ \"(rsc)/./node_modules/domelementtype/lib/index.js\");\n/**\n * This object will be used as the prototype for Nodes when creating a\n * DOM-Level-1-compliant structure.\n */\nvar Node = /** @class */function () {\n  function Node() {\n    /** Parent of the node */\n    this.parent = null;\n    /** Previous sibling */\n    this.prev = null;\n    /** Next sibling */\n    this.next = null;\n    /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */\n    this.startIndex = null;\n    /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */\n    this.endIndex = null;\n  }\n  Object.defineProperty(Node.prototype, \"parentNode\", {\n    // Read-write aliases for properties\n    /**\n     * Same as {@link parent}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */\n    get: function () {\n      return this.parent;\n    },\n    set: function (parent) {\n      this.parent = parent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Node.prototype, \"previousSibling\", {\n    /**\n     * Same as {@link prev}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */\n    get: function () {\n      return this.prev;\n    },\n    set: function (prev) {\n      this.prev = prev;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Node.prototype, \"nextSibling\", {\n    /**\n     * Same as {@link next}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */\n    get: function () {\n      return this.next;\n    },\n    set: function (next) {\n      this.next = next;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Clone this node, and optionally its children.\n   *\n   * @param recursive Clone child nodes as well.\n   * @returns A clone of the node.\n   */\n  Node.prototype.cloneNode = function (recursive) {\n    if (recursive === void 0) {\n      recursive = false;\n    }\n    return cloneNode(this, recursive);\n  };\n  return Node;\n}();\nexports.Node = Node;\n/**\n * A node that contains some data.\n */\nvar DataNode = /** @class */function (_super) {\n  __extends(DataNode, _super);\n  /**\n   * @param data The content of the data node\n   */\n  function DataNode(data) {\n    var _this = _super.call(this) || this;\n    _this.data = data;\n    return _this;\n  }\n  Object.defineProperty(DataNode.prototype, \"nodeValue\", {\n    /**\n     * Same as {@link data}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */\n    get: function () {\n      return this.data;\n    },\n    set: function (data) {\n      this.data = data;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return DataNode;\n}(Node);\nexports.DataNode = DataNode;\n/**\n * Text within the document.\n */\nvar Text = /** @class */function (_super) {\n  __extends(Text, _super);\n  function Text() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = domelementtype_1.ElementType.Text;\n    return _this;\n  }\n  Object.defineProperty(Text.prototype, \"nodeType\", {\n    get: function () {\n      return 3;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Text;\n}(DataNode);\nexports.Text = Text;\n/**\n * Comments within the document.\n */\nvar Comment = /** @class */function (_super) {\n  __extends(Comment, _super);\n  function Comment() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = domelementtype_1.ElementType.Comment;\n    return _this;\n  }\n  Object.defineProperty(Comment.prototype, \"nodeType\", {\n    get: function () {\n      return 8;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Comment;\n}(DataNode);\nexports.Comment = Comment;\n/**\n * Processing instructions, including doc types.\n */\nvar ProcessingInstruction = /** @class */function (_super) {\n  __extends(ProcessingInstruction, _super);\n  function ProcessingInstruction(name, data) {\n    var _this = _super.call(this, data) || this;\n    _this.name = name;\n    _this.type = domelementtype_1.ElementType.Directive;\n    return _this;\n  }\n  Object.defineProperty(ProcessingInstruction.prototype, \"nodeType\", {\n    get: function () {\n      return 1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ProcessingInstruction;\n}(DataNode);\nexports.ProcessingInstruction = ProcessingInstruction;\n/**\n * A `Node` that can have children.\n */\nvar NodeWithChildren = /** @class */function (_super) {\n  __extends(NodeWithChildren, _super);\n  /**\n   * @param children Children of the node. Only certain node types can have children.\n   */\n  function NodeWithChildren(children) {\n    var _this = _super.call(this) || this;\n    _this.children = children;\n    return _this;\n  }\n  Object.defineProperty(NodeWithChildren.prototype, \"firstChild\", {\n    // Aliases\n    /** First child of the node. */\n    get: function () {\n      var _a;\n      return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeWithChildren.prototype, \"lastChild\", {\n    /** Last child of the node. */\n    get: function () {\n      return this.children.length > 0 ? this.children[this.children.length - 1] : null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeWithChildren.prototype, \"childNodes\", {\n    /**\n     * Same as {@link children}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */\n    get: function () {\n      return this.children;\n    },\n    set: function (children) {\n      this.children = children;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return NodeWithChildren;\n}(Node);\nexports.NodeWithChildren = NodeWithChildren;\nvar CDATA = /** @class */function (_super) {\n  __extends(CDATA, _super);\n  function CDATA() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = domelementtype_1.ElementType.CDATA;\n    return _this;\n  }\n  Object.defineProperty(CDATA.prototype, \"nodeType\", {\n    get: function () {\n      return 4;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return CDATA;\n}(NodeWithChildren);\nexports.CDATA = CDATA;\n/**\n * The root node of the document.\n */\nvar Document = /** @class */function (_super) {\n  __extends(Document, _super);\n  function Document() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = domelementtype_1.ElementType.Root;\n    return _this;\n  }\n  Object.defineProperty(Document.prototype, \"nodeType\", {\n    get: function () {\n      return 9;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Document;\n}(NodeWithChildren);\nexports.Document = Document;\n/**\n * An element within the DOM.\n */\nvar Element = /** @class */function (_super) {\n  __extends(Element, _super);\n  /**\n   * @param name Name of the tag, eg. `div`, `span`.\n   * @param attribs Object mapping attribute names to attribute values.\n   * @param children Children of the node.\n   */\n  function Element(name, attribs, children, type) {\n    if (children === void 0) {\n      children = [];\n    }\n    if (type === void 0) {\n      type = name === \"script\" ? domelementtype_1.ElementType.Script : name === \"style\" ? domelementtype_1.ElementType.Style : domelementtype_1.ElementType.Tag;\n    }\n    var _this = _super.call(this, children) || this;\n    _this.name = name;\n    _this.attribs = attribs;\n    _this.type = type;\n    return _this;\n  }\n  Object.defineProperty(Element.prototype, \"nodeType\", {\n    get: function () {\n      return 1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Element.prototype, \"tagName\", {\n    // DOM Level 1 aliases\n    /**\n     * Same as {@link name}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */\n    get: function () {\n      return this.name;\n    },\n    set: function (name) {\n      this.name = name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Element.prototype, \"attributes\", {\n    get: function () {\n      var _this = this;\n      return Object.keys(this.attribs).map(function (name) {\n        var _a, _b;\n        return {\n          name: name,\n          value: _this.attribs[name],\n          namespace: (_a = _this[\"x-attribsNamespace\"]) === null || _a === void 0 ? void 0 : _a[name],\n          prefix: (_b = _this[\"x-attribsPrefix\"]) === null || _b === void 0 ? void 0 : _b[name]\n        };\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Element;\n}(NodeWithChildren);\nexports.Element = Element;\n/**\n * @param node Node to check.\n * @returns `true` if the node is a `Element`, `false` otherwise.\n */\nfunction isTag(node) {\n  return (0, domelementtype_1.isTag)(node);\n}\nexports.isTag = isTag;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `CDATA`, `false` otherwise.\n */\nfunction isCDATA(node) {\n  return node.type === domelementtype_1.ElementType.CDATA;\n}\nexports.isCDATA = isCDATA;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Text`, `false` otherwise.\n */\nfunction isText(node) {\n  return node.type === domelementtype_1.ElementType.Text;\n}\nexports.isText = isText;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Comment`, `false` otherwise.\n */\nfunction isComment(node) {\n  return node.type === domelementtype_1.ElementType.Comment;\n}\nexports.isComment = isComment;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */\nfunction isDirective(node) {\n  return node.type === domelementtype_1.ElementType.Directive;\n}\nexports.isDirective = isDirective;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */\nfunction isDocument(node) {\n  return node.type === domelementtype_1.ElementType.Root;\n}\nexports.isDocument = isDocument;\n/**\n * @param node Node to check.\n * @returns `true` if the node has children, `false` otherwise.\n */\nfunction hasChildren(node) {\n  return Object.prototype.hasOwnProperty.call(node, \"children\");\n}\nexports.hasChildren = hasChildren;\n/**\n * Clone a node, and optionally its children.\n *\n * @param recursive Clone child nodes as well.\n * @returns A clone of the node.\n */\nfunction cloneNode(node, recursive) {\n  if (recursive === void 0) {\n    recursive = false;\n  }\n  var result;\n  if (isText(node)) {\n    result = new Text(node.data);\n  } else if (isComment(node)) {\n    result = new Comment(node.data);\n  } else if (isTag(node)) {\n    var children = recursive ? cloneChildren(node.children) : [];\n    var clone_1 = new Element(node.name, __assign({}, node.attribs), children);\n    children.forEach(function (child) {\n      return child.parent = clone_1;\n    });\n    if (node.namespace != null) {\n      clone_1.namespace = node.namespace;\n    }\n    if (node[\"x-attribsNamespace\"]) {\n      clone_1[\"x-attribsNamespace\"] = __assign({}, node[\"x-attribsNamespace\"]);\n    }\n    if (node[\"x-attribsPrefix\"]) {\n      clone_1[\"x-attribsPrefix\"] = __assign({}, node[\"x-attribsPrefix\"]);\n    }\n    result = clone_1;\n  } else if (isCDATA(node)) {\n    var children = recursive ? cloneChildren(node.children) : [];\n    var clone_2 = new CDATA(children);\n    children.forEach(function (child) {\n      return child.parent = clone_2;\n    });\n    result = clone_2;\n  } else if (isDocument(node)) {\n    var children = recursive ? cloneChildren(node.children) : [];\n    var clone_3 = new Document(children);\n    children.forEach(function (child) {\n      return child.parent = clone_3;\n    });\n    if (node[\"x-mode\"]) {\n      clone_3[\"x-mode\"] = node[\"x-mode\"];\n    }\n    result = clone_3;\n  } else if (isDirective(node)) {\n    var instruction = new ProcessingInstruction(node.name, node.data);\n    if (node[\"x-name\"] != null) {\n      instruction[\"x-name\"] = node[\"x-name\"];\n      instruction[\"x-publicId\"] = node[\"x-publicId\"];\n      instruction[\"x-systemId\"] = node[\"x-systemId\"];\n    }\n    result = instruction;\n  } else {\n    throw new Error(\"Not implemented yet: \".concat(node.type));\n  }\n  result.startIndex = node.startIndex;\n  result.endIndex = node.endIndex;\n  if (node.sourceCodeLocation != null) {\n    result.sourceCodeLocation = node.sourceCodeLocation;\n  }\n  return result;\n}\nexports.cloneNode = cloneNode;\nfunction cloneChildren(childs) {\n  var children = childs.map(function (child) {\n    return cloneNode(child, true);\n  });\n  for (var i = 1; i < children.length; i++) {\n    children[i].prev = children[i - 1];\n    children[i - 1].next = children[i];\n  }\n  return children;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domhandler/lib/node.js\n");

/***/ })

};
;